name: Frontend Staging Pipeline
description: CI/CD pipeline for the Staging NextJS Frontend application

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-staging.yml'

jobs:
  Frontend-staging:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    environment: dev

    env:
      NEXTJS_ECR_URL: ${{ secrets.NEXTJS_ECR_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER_NAME: ${{ secrets.STAGING_ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.NEXTJS_ECS_SERVICE_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      - name: Login to Amazon Flask ECR repo
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_REGISTRY}}
          
      - name: Build and Push Next.js App
        run: |
          docker build -t nextjs-app ./frontend
          docker tag nextjs-app:latest $NEXTJS_ECR_URL:latest
          docker push $NEXTJS_ECR_URL:latest
      
      - name: Force New Deployment on ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --force-new-deployment

  trigger-production:
    name: Request Production Deployment
    needs: Frontend-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      
      deployment_branch_policy:
        protected_branches: true
    steps:
      - name: Await Production Approval
        run: echo "Ready for production deployment. Approve manually."

                
